// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// elogLik
double elogLik(std::vector<double> model, std::vector<double> data, double min, double max, unsigned int breaks);
RcppExport SEXP EMdevs_elogLik(SEXP modelSEXP, SEXP dataSEXP, SEXP minSEXP, SEXP maxSEXP, SEXP breaksSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector<double> >::type model(modelSEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type data(dataSEXP );
        Rcpp::traits::input_parameter< double >::type min(minSEXP );
        Rcpp::traits::input_parameter< double >::type max(maxSEXP );
        Rcpp::traits::input_parameter< unsigned int >::type breaks(breaksSEXP );
        double __result = elogLik(model, data, min, max, breaks);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// crispR
DataFrame crispR(int n, double tsac = 250, double N = 11, double m_lab = 180, double sd_lab = 45, double m_nlab = 40, double sd_nlab = 10, double m_ex = 40, double sd_ex = 13);
RcppExport SEXP EMdevs_crispR(SEXP nSEXP, SEXP tsacSEXP, SEXP NSEXP, SEXP m_labSEXP, SEXP sd_labSEXP, SEXP m_nlabSEXP, SEXP sd_nlabSEXP, SEXP m_exSEXP, SEXP sd_exSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type n(nSEXP );
        Rcpp::traits::input_parameter< double >::type tsac(tsacSEXP );
        Rcpp::traits::input_parameter< double >::type N(NSEXP );
        Rcpp::traits::input_parameter< double >::type m_lab(m_labSEXP );
        Rcpp::traits::input_parameter< double >::type sd_lab(sd_labSEXP );
        Rcpp::traits::input_parameter< double >::type m_nlab(m_nlabSEXP );
        Rcpp::traits::input_parameter< double >::type sd_nlab(sd_nlabSEXP );
        Rcpp::traits::input_parameter< double >::type m_ex(m_exSEXP );
        Rcpp::traits::input_parameter< double >::type sd_ex(sd_exSEXP );
        DataFrame __result = crispR(n, tsac, N, m_lab, sd_lab, m_nlab, sd_nlab, m_ex, sd_ex);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// elogLik
double elogLik(std::vector<double> model, std::vector<double> data, double min, double max, unsigned int breaks);
RcppExport SEXP EMdevs_elogLik(SEXP modelSEXP, SEXP dataSEXP, SEXP minSEXP, SEXP maxSEXP, SEXP breaksSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector<double> >::type model(modelSEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type data(dataSEXP );
        Rcpp::traits::input_parameter< double >::type min(minSEXP );
        Rcpp::traits::input_parameter< double >::type max(maxSEXP );
        Rcpp::traits::input_parameter< unsigned int >::type breaks(breaksSEXP );
        double __result = elogLik(model, data, min, max, breaks);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
